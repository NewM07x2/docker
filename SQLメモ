DROP TABLE IF EXISTS "user";
CREATE TABLE "user" (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    mail VARCHAR(100) UNIQUE NOT NULL,
    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS "task";
CREATE TABLE "task" (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    task_name VARCHAR(50) NOT NULL,
    task_detail VARCHAR(255),
    status VARCHAR(10) NOT NULL DEFAULT 'new',
    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO "task" (task_name, task_detail, status) 
VALUES 
('タスク1', 'タスク1の詳細', 'new'),
('タスク2', 'タスク2の詳細', 'progress'),
('タスク3', 'タスク3の詳細', 'completed');

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$
language 'plpgsql';

CREATE TRIGGER update_task_modtime
BEFORE UPDATE ON task
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

select * from task where status = 'completed';



DROP TABLE IF EXISTS "test";
DROP TABLE IF EXISTS "test";
CREATE TABLE "test" (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    content VARCHAR(255),
    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO "test" (content) 
VALUES 
('test1'),
('test2'),
('test3');
